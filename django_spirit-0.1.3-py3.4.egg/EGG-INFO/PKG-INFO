Metadata-Version: 1.1
Name: django-spirit
Version: 0.1.3
Summary: Spirit is a Python based forum powered by Django.
Home-page: http://spirit-project.com/
Author: Esteban Castro Borsani
Author-email: ecastroborsani@gmail.com
License: MIT License
Description: # Spirit [![Build Status](https://travis-ci.org/nitely/Spirit.png)](https://travis-ci.org/nitely/Spirit) [![Coverage Status](https://coveralls.io/repos/nitely/Spirit/badge.png)](https://coveralls.io/r/nitely/Spirit)
        
        Spirit is a Python based forum built using the Django framework.
        
        To see it in action, please visit [The Spirit Project](http://spirit-project.com/).
        
        ## Requirements
        
        Spirit requires the following software to be installed:
        
        * Python 2.7, 3.3 or 3.4 (recommended)
        * Django 1.7
        * PostgreSQL or MySQL or Oracle Database
        
        ## Dependencies
        
        Check out the [requirements](https://github.com/nitely/Spirit/blob/master/requirements.txt) provided.
        
        ## Integration
        
        Spirit can be integrated with any other Django application without much of a hassle.
        
        The only thing to notice is that Spirit uses its own *AUTH_USER_MODEL*.
        
        If you want to roll your own user app, your user model must inherit from `spirit.models.user.AbstractForumUser`.
        
        If you want to extend the Spirit user model (adding new fields or methods),
        your model must inherit from `spirit.models.user.AbstractUser`.
        
        If you just want to integrate Spirit's user profile to your *existing* project
        and you are using the default Django's user model, check out the [Spirit-User-Profile](https://github.com/nitely/Spirit-User-Profile) app.
        
        ## Installing (Advanced)
        
        Check out the [example](https://github.com/nitely/Spirit/tree/master/example) provided.
        
        In short:
        
        Add `url(r'^', include('spirit.urls', namespace="spirit", app_name="spirit")),` to your *urls.py*
        
        Add `from spirit.settings import *` to the top of your *settings.py* file,
        otherwise you will have to setup all django's related constants (Installed_apps, Middlewares, Login_url, etc)
        
        Run:
        
            pip install -r requirements.txt
            python manage.py migrate
            python manage.py createcachetable spirit_cache
            python manage.py collectstatic
        
        > **Note:**
        >
        > You will need to setup a search engine,
        > Spirit is configured to work with [Woosh](https://bitbucket.org/mchaput/whoosh/wiki/Home) by default.
        >
        > An email server is required, you can host your own (ie: [exim](http://www.exim.org/)),
        > or hire an external service provider (ie: [Mandrill](http://mandrill.com/)).
        
        Start a development server:
        
            python manage.py runserver
        
        Visit (http://127.0.0.1:8000/)
        
        > **Note:** On production, you would rather run Spirit on a real web server. ie: gunicorn + Nginx.
        > Running Spirit on a [virtualenv](http://www.virtualenv.org) is adviced.
        
        ## Updating
        
        Run:
        
            pip install -r requirements.txt
            python manage.py migrate
            python manage.py collectstatic
            python manage.py rebuild_index --noinput
        
        ## Contributing
        
        Feel free to check out the source code and submit pull requests.
        
        You may also report any bug or propose new features in the [issues tracker](https://github.com/nitely/Spirit/issues)
        
        ## Copyright / License
        
        Copyright 2014 [Esteban Castro Borsani](https://github.com/nitely).
        
        Licensed under the [MIT License](https://github.com/nitely/Spirit/blob/master/LICENSE).
        
        Unless required by applicable law or agreed to in writing,
        software distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and limitations under the License.
        
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content





Metadata-Version: 1.1
Name: django-quiz-app
Version: 0.5.0
Summary: A configurable quiz app for Django.
Home-page: https://github.com/tomwalker/django_quiz
Author: Tom Walker
Author-email: tomwalker0472@gmail.com
License: MIT License
Description: ===============
        Django quiz app
        ===============
        
        This is a configurable quiz app for Django.
        
        Current features
        ----------------
        * Question order randomisation
        * Storing of quiz results under each user
        * Previous quiz scores can be viewed on category page
        * Correct answers can be shown after each question or all at once at the end
        * Logged in users can return to an incomplete quiz to finish it and non-logged in users can complete a quiz if their session persists
        * The quiz can be limited to one attempt per user
        * Questions can be given a category
        * Success rate for each category can be monitored on a progress page
        * Explanation for each question result can be given
        * Pass marks can be set
        * Multiple choice question type
        * True/False question type
        * Essay question type
        * Custom message displayed for those that pass or fail a quiz
        * Custom permission (view_sittings) added, allowing users with that permission to view quiz results from users
        * A marking page which lists completed quizzes, can be filtered by quiz or user, and is used to mark essay questions
        
        
        Requirements
        ------------
        
        django-model-utils 2.0.3
        
        It was developed using Django 1.6.5
        
        Installation
        ------------
        
          git clone https://github.com/tomwalker/django_quiz.git
        
          pip install -r requirements.txt
        
        Add 'quiz', 'multichoice', 'true_false', and 'essay' to your 'INSTALLED_APPS' setting.
        
          INSTALLED_APPS = (
              ...
              'quiz',
              'multichoice',
              'true_false',
              ...
          )
        
        Add the following to your projects 'urls.py' file, substituting 'q'
        for whatever you want the quiz base url to be.
        
          urlpatterns = patterns('',
              ...
              url(r'^q/', include('quiz.urls')),
              ...
          )
        
        MIT License (MIT) Copyright (c) 2012 - 2014 Dr Tom Walker
        
        Permission is hereby granted, free of charge, to any person obtaining a
        copy of this software and associated documentation files (the
        “Software”), to deal in the Software without restriction, including
        without limitation the rights to use, copy, modify, merge, publish,
        distribute, sublicense, and/or sell copies of the Software, and to
        permit persons to whom the Software is furnished to do so, subject to
        the following conditions:
        
        The above copyright notice and this permission notice shall be included
        in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS
        OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
        IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
        CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
        TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
        SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        
Platform: UNKNOWN
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
